@page "/admin/users/{id}"

@inject AppUserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAdUserService AdUserService
@inject ILogger<Details> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject SqidsEncoder<int> SqidsEncoder

<PageTitle>Details for user @(User is null ? null : User.UserName)</PageTitle>
<PageScript Src="./Components/Pages/Admin/Users/Details.razor.js" />

@if (User is null)
{
    <p>Loading, please wait...</p>
}
else
{
    <div class="col-md-8 mx-auto">
        <StatusMessage Message="@Message" />
        <h2 class="fw-bold text-center">@User.DisplayName</h2>
        @if (IsDbUserCurrentUser)
        {
            <h6 class="text-center text-muted"><em>(That's you!)</em></h6>
        }
        <hr />
        <table class="table table-bordered table-striped">
            <tbody>
                <tr>
                    <td>Username:</td>
                    <td>@User.UserName</td>
                </tr>
                <tr>
                    <td>UPN:</td>
                    <td>@User.UserPrincipalName</td>
                </tr>
                <tr>
                    <td>Email:</td>
                    <td>
                        <a href="@($"mailto:{User.Email}")">@User.Email</a>
                    </td>
                </tr>
                <tr>
                    <td>Email Confirmed:</td>
                    <td>@(User.EmailConfirmed ? "✅" : "❌")</td>
                </tr>
                <tr>
                    <td>Id:</td>
                    <td>@User.Id</td>
                </tr>
                <tr>
                    <td>Created:</td>
                    <td>@User.Created.ToString()</td>
                </tr>
                <tr>
                    <td>Updated:</td>
                    <td>@(User.Updated.HasValue ? User.Updated.Value.ToString() : "Never")</td>
                </tr>
                <tr>
                    <td>Lockout Enabled:</td>
                    <td>@(User.LockoutEnabled ? "✅" : "❌")</td>
                </tr>
                <tr>
                    <td>Two Factor Enabled:</td>
                    <td>@(User.TwoFactorEnabled ? "✅" : "❌")</td>
                </tr>
                <tr>
                    <td>Phone Number Confirmed:</td>
                    <td>@(User.PhoneNumberConfirmed ? "✅" : "❌")</td>
                </tr>
                @if (User.Roles is not null)
                {
                    <tr>
                        <td>Roles:</td>
                        <td>
                            @foreach (var role in User.Roles)
                            {
                                @role<br />
                            }
                        </td>
                    </tr>
                }
            </tbody>            
        </table>
        <div class="vstack gap-2">
            <NavLink href="@($"/admin/users/{Id}/edit")" class="btn btn-lg btn-primary">Edit User</NavLink>            
            <EditForm id="deleteForm" Model="Id" FormName="deleteform" OnValidSubmit="DeleteUser">
                <input type="hidden" name="id" value="@Id" />
                <button id="deleteBtn" type="submit" class="w-100 btn btn-lg btn-danger" disabled="@IsDbUserCurrentUser">
                    Delete User
                </button>
            </EditForm>
            
            <NavLink href="/admin/users" class="btn btn-link">Back</NavLink>            
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private bool IsDbUserCurrentUser = false;

    private IEnumerable<IdentityError>? identityErrors;

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private UserDetailsDto? User { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        if (currentUser.Identity is not null && currentUser.Identity.IsAuthenticated)
        {
            User = await GetUserData();
            IsDbUserCurrentUser = currentUser.Identity.Name == User.UserName;
        }
    }

    private async Task<UserDetailsDto> GetUserData()
    {
        try
        {
            int id = Sqids.DecodeSingleOrDefault(Id, SqidsEncoder);
            var user = await UserManager.GetUserAsync(id);
            var adUser = await AdUserService.GetAdUser(user!.UserName!);
            user.AdUser = adUser;
            return new()
            {
                Id = user.Id,
                UserName = user.UserName!,
                DisplayName = user.DisplayName!,
                UserPrincipalName = adUser.UserPrincipalName!,
                Email = user.Email!,
                Created = user.Created,
                Updated = user.Updated,
                EmailConfirmed = user.EmailConfirmed,
                PhoneNumberConfirmed = user.PhoneNumberConfirmed,
                LockoutEnabled = user.LockoutEnabled,
                TwoFactorEnabled = user.TwoFactorEnabled,
                Roles = await UserManager.GetRolesAsync(user) as List<string>,
            };
        }
        catch (Exception ex)
        {
            Logger.LogError("~/Components/Pages/Admin/Users/Details.razor - [{methodName}]: {exMessage}", nameof(GetUserData), ex.Message);
            NavigationManager.NavigateTo("/Error");
            throw;
        }
    }

    public async Task DeleteUser()
    {
        if (IsDbUserCurrentUser)
        {
            identityErrors = [IdentityErrorExtensions.AppInvalidOperation("Current Admin Cannot Delete Own Account")];
            return;
        }
        int id = Sqids.DecodeSingleOrDefault(Id, SqidsEncoder);
        var user = await UserManager.GetUserAsync(id);
        if (user is null)
        {
            identityErrors = [IdentityErrorExtensions.AppInvalidOperation("User could not be found in DB!")];
            return;
        }
        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            identityErrors = [IdentityErrorExtensions.AppInvalidOperation("Unexpected error occurred deleting user.")];
            return;
        }
        RedirectManager.RedirectToWithStatus($"/admin/users/", $"User with ID: `{Id}` deleted.", HttpContext!);
    }
}